{
  "openapi": "3.0.0",
  "info": {
    "title": "GIZINET API",
    "version": "1.0.0",
    "description": "API documentation for managing food nutrition analysis"
  },
  "servers": [
    {
      "url": "https://itase-6.vercel.app/api",
      "description": "Production server"
    }
  ],
  "paths": {
    "/auth/register": {
      "post": {
        "summary": "Create a new user",
        "tags": [
          "Users"
        ],
        "description": "Creates a new user with the given name, email, password, date of birth, gender, height and weight.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterUser"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "User created successfully"
                    },
                    "data": {
                      "$ref": "#/components/schemas/User"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "summary": "Login user",
        "tags": [
          "Users"
        ],
        "description": "Login with the given email and password to receive a JWT.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "password"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "example": "johndoe@example.com"
                  },
                  "password": {
                    "type": "string",
                    "format": "password",
                    "example": "strongPassword123"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Login successful"
                    },
                    "data": {
                      "$ref": "#/components/schemas/User"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request (e.g., invalid credentials)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/auth/authorize": {
      "post": {
        "summary": "Authorize with token",
        "tags": [
          "Users"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "description": "Validates the bearer token and returns user data if valid.",
        "responses": {
          "200": {
            "description": "Authorization successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Authorization successful"
                    },
                    "data": {
                      "type": "string",
                      "example": "User is authorized"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/auth/{user_id}": {
      "get": {
        "summary": "Get user data",
        "tags": [
          "Users"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "description": "The ID of the user to retrieve.",
            "schema": {
              "type": "string",
              "example": "user-abc-123"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Success get user data"
                    },
                    "data": {
                      "$ref": "#/components/schemas/User"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "User Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update user data or password",
        "tags": [
          "Users"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "description": "The ID of the user to update.",
            "schema": {
              "type": "string",
              "example": "user-abc-123"
            }
          }
        ],
        "description": "Partially updates a user's data. This endpoint can be used for two distinct purposes:\n1. **Update profile information**: Provide fields like `name`, `height`, etc.\n2. **Change password**: Provide `old_password` and `new_password`.\n\nPlease provide only one type of payload at a time.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/UpdateUserData"
                  },
                  {
                    "$ref": "#/components/schemas/UpdatePassword"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User data or password updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Success update user"
                    },
                    "data": {
                      "$ref": "#/components/schemas/User"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request (e.g., invalid input, incorrect old password)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "User Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "RegisterUser": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "John Doe"
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "johndoe@example.com"
          },
          "password": {
            "type": "string",
            "format": "password",
            "example": "strongPassword123"
          },
          "date_of_birth": {
            "type": "string",
            "format": "date",
            "example": "1995-08-17"
          },
          "gender": {
            "type": "string",
            "enum": [
              "male",
              "female"
            ],
            "example": "male"
          },
          "height": {
            "type": "number",
            "description": "Height in cm",
            "example": 175
          },
          "weight": {
            "type": "number",
            "description": "Weight in kg",
            "example": 70
          }
        },
        "required": [
          "name",
          "email",
          "password",
          "date_of_birth",
          "gender",
          "height",
          "weight"
        ]
      },
      "UpdateUserData": {
        "type": "object",
        "title": "Update User Data Schema",
        "properties": {
          "name": {
            "type": "string",
            "example": "John Doe Updated"
          },
          "date_of_birth": {
            "type": "string",
            "format": "date",
            "example": "1995-08-17"
          },
          "gender": {
            "type": "string",
            "enum": [
              "male",
              "female"
            ],
            "example": "male"
          },
          "height": {
            "type": "number",
            "example": 176
          },
          "weight": {
            "type": "number",
            "example": 72
          }
        }
      },
      "UpdatePassword": {
        "type": "object",
        "title": "Update Password Schema",
        "required": [
          "old_password",
          "new_password"
        ],
        "properties": {
          "old_password": {
            "type": "string",
            "format": "password",
            "example": "currentStrongPassword123"
          },
          "new_password": {
            "type": "string",
            "format": "password",
            "example": "newVeryStrongPassword456"
          }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "user_id": {
            "type": "string",
            "example": "usr-xyz-789"
          },
          "name": {
            "type": "string",
            "example": "John Doe"
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "johndoe@example.com"
          },
          "google_id": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "description": "Hashed password",
            "example": "$2b$10$..."
          },
          "date_of_birth": {
            "type": "string",
            "format": "date",
            "example": "1995-08-17"
          },
          "gender": {
            "type": "string",
            "example": "male"
          },
          "height": {
            "type": "number",
            "example": 175
          },
          "weight": {
            "type": "number",
            "example": 70
          },
          "bmr": {
            "type": "number",
            "example": 1650.5
          },
          "calorie": {
            "type": "number",
            "example": 2000
          },
          "carbohydrate": {
            "type": "number",
            "example": 250
          },
          "protein": {
            "type": "number",
            "example": 100
          },
          "fat": {
            "type": "number",
            "example": 60
          },
          "vitamin_a": {
            "type": "number",
            "example": 65
          },
          "vitamin_c": {
            "type": "number",
            "example": 70
          },
          "vitamin_d": {
            "type": "number",
            "example": 75
          },
          "vitamin_e": {
            "type": "number",
            "example": 80
          },
          "vitamin_k": {
            "type": "number",
            "example": 85
          },
          "calsium": {
            "type": "number",
            "example": 90
          },
          "iron": {
            "type": "number",
            "example": 95
          },
          "calium": {
            "type": "number",
            "example": 100
          },
          "magnesium": {
            "type": "number",
            "example": 105
          },
          "natrium": {
            "type": "number",
            "example": 110
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2023-10-27T10:00:00Z"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "example": "2023-10-27T10:00:00Z"
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "required": [
          "success",
          "message"
        ],
        "properties": {
          "success": {
            "type": "boolean",
            "example": false
          },
          "message": {
            "type": "string",
            "example": "Invalid input provided"
          }
        }
      }
    }
  }
}
